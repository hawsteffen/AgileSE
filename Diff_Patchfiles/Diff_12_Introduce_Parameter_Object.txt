@@ -1,27 +1,27 @@

-def checkItems(out,item,items)

+def checkItems(itemWrap)

    # add the item to the list ONLY if it has not been added yet

-   for i in items

-     return i == item

+   for i in itemWrap.items

+     return i == itemWrap.item

    end

    # do this if flag is false

-   printAndAddItem(out,item,items)  

+   printAndAddItem(itemWrap)  

 end

 

-def checkNotIncludeItems(out,item,items)

-    if !items.include? item

-        printAndAddItem(out,item,items)

+def checkNotIncludeItems(itemWrap)

+    if !itemWrap.items.include? itemWrap.item

+        printAndAddItem(itemWrap)

     end

 end

 

-def checkConditions(conditions,weather_conditions_to_match,items,item,out)

+def checkConditions(conditions,weather_conditions_to_match,itemWrap)

    if conditions.all? {|condition| weather_conditions_to_match.include? condition }

-      unless items.include? item

-        printAndAddItem(out,item,items)

+      unless itemWrap.items.include? itemWrap.item

+        printAndAddItem(itemWrap)

       end

    end

 end

 

-def printAndAddItem(out,item,items)

-  out.puts item

-  items << item

+def printAndAddItem(itemWrap)

+  itemWrap.out.puts itemWrap.item

+  itemWrap.items << itemWrap.item

 end
 
 @@ -5,6 +5,8 @@

 require File.expand_path(File.dirname(__FILE__)) + '/option_parsing'

 require File.expand_path(File.dirname(__FILE__)) + '/methods'

 

+require 'itemWrapper.rb'  

+

 options = parse_options

 

 out = (options[:out]) ? File.open(options[:out], 'w') : $stdout
...	 ...	
@@ -14,13 +16,14 @@

 CSV.foreach(options[:in]) do |row|

   if row.size > 0

     item = row[0]

+    itemWrap = ItemWrapper.new(out,item,items)

     when_to_pack = row[1].strip.downcase

     weather_conditions_to_match = ['always'] | options[:weather]

 

     if when_to_pack.match(/always/)

-      checkItems(out,item,items)            

+      checkItems(itemWrap)            

     elsif weather_conditions_to_match.include? when_to_pack

-      checkNotIncludeItems(out,item,items)

+      checkNotIncludeItems(itemWrap)

     end

     # ONLY SUPPORTS AND/OR OPERATORS

     # TODO: SUPPORT NOT OPERATOR
...	 ...	
@@ -28,15 +31,15 @@

     

     if when_to_pack.match(/and/)

       conditions = when_to_pack.split('and').map {|condition| condition.lstrip.rstrip }

-      checkConditions(conditions,weather_conditions_to_match,items,item,out)

+      checkConditions(conditions,weather_conditions_to_match,itemWrap)

     elsif when_to_pack.match(/or/) or !when_to_pack.match(/and/)

       if when_to_pack.split('or').map {|condition|condition.strip }.any? {|condition| weather_conditions_to_match.include? condition }

-        checkNotIncludeItems(out,item,items)

+        checkNotIncludeItems(itemWrap)

       end

     elsif when_to_pack.match(/^not/)

       when_to_pack = when_to_pack.strip.reverse.chop.chop.chop.reverse.strip

       if !weather_conditions_to_match.include?(when_to_pack)

-        checkNotIncludeItems(out,item,items)

+        checkNotIncludeItems(itemWrap)

       end

     else

       raise RegexpError.new("An error has been occured!")